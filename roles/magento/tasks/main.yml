- name: Set Magento access keys for Composer
  command: composer -n global config http-basic.repo.magento.com "{{ magento_public_key }}" "{{ magento_private_key }}"

- name: Retrieve project dependencies with Composer
  command: composer install --no-dev -n
  args:
    chdir: "{{ server_dir }}"

- name: Set Files and Directories Group User
  file:
    dest: "{{ server_dir }}"
    group: www-data
    recurse: yes

- name: Set Permission u+x to bin/magento
  file:
    path: "{{ server_dir }}/bin/magento"
    mode: u+x

- name: Check Magento env file
  ansible.builtin.stat:
    path: "{{ server_dir }}/app/etc/env.php"
  register: magento_env_file

- name: Install Magento
  shell: |
    php{{ php_version }} bin/magento setup:install \
    --base-url="http://{{ server_hostname }}/" \
    --base-url-secure="https://{{ server_hostname }}/" \
    --db-host="{{ mariadb_host }}" \
    --db-name="{{ mariadb_name }}" \
    --db-user="{{ mariadb_user }}" \
    --db-password="{{ mariadb_password }}" \
    --backend-frontname="{{ magento_admin_frontname }}" \
    --admin-firstname="{{ magento_admin_firstname }}" \
    --admin-lastname="{{ magento_admin_lastname }}" \
    --admin-email="{{ magento_admin_email }}" \
    --admin-user="{{ magento_admin_user }}" \
    --admin-password="{{ magento_admin_password }}" \
    --language="{{ magento_language }}" \
    --currency="{{ magento_currency }}" \
    --timezone="{{ server_timezone }}" \
    --use-rewrites="1" \
    --cache-backend="redis" \
    --cache-backend-redis-server="{{ redis_host }}" \
    --cache-backend-redis-db=0 \
    --cache-backend-redis-port={{ redis_port }} \
    --page-cache="redis" \
    --page-cache-redis-server="{{ redis_host }}" \
    --page-cache-redis-db=1 \
    --page-cache-redis-port={{ redis_port }} \
    --session-save-redis-host="{{ redis_host }}" \
    --session-save-redis-port={{ redis_port }} \
    --session-save-redis-db=2 \
    --session-save-redis-max-concurrency=20 \
    --amqp-host="{{ rabbitmq_host }}" \
    --amqp-port={{ rabbitmq_port }} \
    --amqp-user="{{ rabbitmq_user }}" \
    --amqp-password="{{ rabbitmq_password }}" \
    --amqp-virtualhost="/" \
    --search-engine="opensearch" \
    --opensearch-host="{{ opensearch_host }}" \
    --opensearch-password="{{ opensearch_password }}" \
    --opensearch-port={{ opensearch_port }}
  args:
    chdir: "{{ server_dir }}"
  when: not magento_env_file.stat.exists

- name: Enable Magento maintenance mode
  shell: php{{ php_version }} bin/magento maintenance:enable
  args:
    chdir: "{{ server_dir }}"

- name: Change Magento deployment mode
  shell: php{{ php_version }} bin/magento deploy:mode:set "{{ magento_mode }}"
  args:
    chdir: "{{ server_dir }}"

- name: Setup Magento
  shell: php{{ php_version }} bin/magento setup:upgrade
  args:
    chdir: "{{ server_dir }}"

- name: Compile Magento
  shell: php{{ php_version }} bin/magento setup:di:compile
  args:
    chdir: "{{ server_dir }}"

- name: Deploy the Static Content
  shell: php{{ php_version }} bin/magento setup:static-content:deploy -f
  args:
    chdir: "{{ server_dir }}"

- name: Run Reindexer
  shell: php{{ php_version }} bin/magento indexer:reindex
  args:
    chdir: "{{ server_dir }}"

- name: Flush Cache
  shell: php{{ php_version }} bin/magento cache:flush
  args:
    chdir: "{{ server_dir }}"

- name: Enable Cache
  shell: php{{ php_version }} bin/magento cache:enable
  args:
    chdir: "{{ server_dir }}"

- name: Add Magento to Cron
  shell: php{{ php_version }} bin/magento cron:install
  args:
    chdir: "{{ server_dir }}"

- name: Set Files Permissions to g+w
  shell: find var generated vendor pub/static pub/media app/etc -type f -exec chmod g+w {} \;
  args:
    chdir: "{{ server_dir }}"

- name: Set Directories Permissions to g+ws
  shell: find var generated vendor pub/static pub/media app/etc -type d -exec chmod g+ws {} \;
  args:
    chdir: "{{ server_dir }}"

- name: Disable Magento maintenance mode
  shell: php{{ php_version }} bin/magento maintenance:disable
  args:
    chdir: "{{ server_dir }}"
